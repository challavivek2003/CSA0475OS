#include <stdio.h>
#include <stdlib.h>

#define MAX_RECORDS 100

struct Record {
    int id;
    char data[100];
};

struct File {
    struct Record records[MAX_RECORDS];
    int numRecords;
};

void initFile(struct File *file) {
    file->numRecords = 0;
}

void addRecord(struct File *file, struct Record record) {
    file->records[file->numRecords] = record;
    file->numRecords++;
}

void readRecord(struct File *file, int recordId) {
    for (int i = 0; i < file->numRecords; i++) {
        struct Record record = file->records[i];
        printf("Record %d: %s\n", record.id, record.data);
        if (record.id == recordId) {
            printf("Found record with id %d: %s\n", recordId, record.data);
            break;
        }
    }
}

int main() {
    struct File file;
    initFile(&file);

    struct Record record1 = {.id = 1, .data = "Record 1 data"};
    struct Record record2 = {.id = 2, .data = "Record 2 data"};
    struct Record record3 = {.id = 3, .data = "Record 3 data"};

    addRecord(&file, record1);
    addRecord(&file, record2);
    addRecord(&file, record3);

    readRecord(&file, 2);

    return 0;
}
#include <stdio.h>
#include <stdlib.h>

#define BLOCK_SIZE 1024
#define NUM_BLOCKS 1000

struct file {
    int size;
    int blocks[NUM_BLOCKS];
};

struct file files[100];
int index_block[NUM_BLOCKS];

void init_file_system() {
    int i;
    for (i = 0; i < NUM_BLOCKS; i++) {
        index_block[i] = -1;
    }
}

int allocate_block(int file_index, int block_index) {
    if (index_block[block_index] != -1) {
        printf("Error: block already in use\n");
        return -1;
    }
    index_block[block_index] = file_index;
    files[file_index].blocks[files[file_index].size++] = block_index;
    return 0;
}

int main() {
    init_file_system();
    int file_index = 0;
    int block_index = 0;
    allocate_block(file_index, block_index);
    allocate_block(f…
#include <stdio.h>
#include <stdlib.h>

struct block {
    int data;
    int next;
};

struct file {
    int first;
    int last;
};

struct directory {
    struct file files[10];
};

int main() {
    struct directory dir;
    struct block blocks[100];
    int i;

    // initialize blocks
    for (i = 0; i < 100; i++) {
        blocks[i].data = i;
        blocks[i].next = -1;
    }

    // create file
    int fileIndex = 0;
    dir.files[fileIndex].first = 0;
    dir.files[fileIndex].last = 4;
    for (i = 0; i < 4; i++) {
        blocks[i].next = i + 1;
    }

    // print file
    int currentBlock = dir.files[fileIndex].first;
    while (currentBlock != -1) {
        printf("%d ", blocks[currentBlock].data);
        currentBlock = blocks[currentBlock].next;
    }

    return 0;
}
#include <stdio.h>

#define MAX_REQUESTS 100

int requests[MAX_REQUESTS];
int num_requests;
int head;

void input_requests() {
    printf("Enter the number of disk requests: ");
    scanf("%d", &num_requests);

    printf("Enter the requests (in cylinder numbers): ");
    for (int i = 0; i < num_requests; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter initial head position: ");
    scanf("%d", &head);
}

void first_come_first_served() {
    int total_seek_time = 0;

    printf("\nOrder of requests: ");
    for (int i = 0; i < num_requests; i++) {
        printf("%d ", requests[i]);
        total_seek_time += abs(requests[i] - head);
        head = requests[i];
    }

    printf("\nTotal seek time: %d\n", total_seek_time);
    printf("Aver…
